[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nav2-mcp-server"
version = "1.0.0"
authors = [
    {name = "Alberto J. Tudela RoldÃ¡n", email = "ajtudela@gmail.com"},
]
description = "MCP server wrapping Nav2 action clients"
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    "anyio",
    "empy>=4.2",
    "fastmcp>=2.12.3",
    "lark>=1.3.0",
    "numpy>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "tox>=4.24.1",
    "ruff>=0.9.4",
    "pytest>=6.0",
    "pytest-asyncio",
    "pytest-cov",
    "flake8",
    "mypy",
]

[project.urls]
"Homepage" = "https://github.com/ajtudela/nav2_mcp_server"
"Bug Reports" = "https://github.com/ajtudela/nav2_mcp_server/issues"
"Source" = "https://github.com/ajtudela/nav2_mcp_server"

[project.scripts]
nav2_mcp_server = "nav2_mcp_server.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 79
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 79
extend-ignore = ["E203", "W503"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.tox]
env_list = ["3.12"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]